!<arch>
0-isupper.c/    0           0     0     644     231       `
#include "main.h"
/**
 * _isupper - checks if character is upper case
 * @c: character to be checked
 *
 * Return: 1 if isupper and 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     331       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte
 * @s: memory area to fill
 * @b: consant byte to fill
 * @n: bytes of memory area to fill
 *
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int a;

	for (a = 0 ; a < n ; a++)
		s[a] = b;

	return (s);
}

0-strcat.c/     0           0     0     644     426       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 * @dest: pointer to the string to be concatenated upon
 * @src: pointer to the string to be concatenated to dest
 *
 * Return: the full concatenated string
 */
char *_strcat(char *dest, char *src)
{
	int index = 0;
	int dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0 ; src[index] ; index++)
		dest[dest_len++] = src[index];

	return (dest);
}
100-atoi.c/     0           0     0     644     395       `
#include "main.h"
/**
 * _atoi - converts a string to an integer
 * @s: The string to be converted
 *
 * Return: the integer value converted to a string
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);
	return (num * sign);
}

1-isdigit.c/    0           0     0     644     209       `
#include "main.h"
/**
 * _isdigit - checks if a digit
 * @c: digit to be checked
 *
 * Return: 1 if digit and 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     355       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @dest: memory area to be copied to
 * @src: memory area to copy from
 * @n: number of bytes to be copied
 *
 * Return: returns pointer to the copied bytes
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int a;

	for (a = 0 ; a < n ; a++)
		dest[a] = src[a];

	return (dest);
}

1-strncat.c/    0           0     0     644     492       `
#include "main.h"
/**
 * _strncat - concatenates two strings will use at most n bytes from src
 * @dest: pointer to the first string to be concat upon
 * @src: pointer to the second string
 * @n: number of bytes from src
 *
 * Return: pointer to the resulting string
 */
char *_strncat(char *dest, char *src, int n)
{
	int index = 0, dest_len = 0;

	while (dest[index++])
		dest_len++;

	for (index = 0 ; src[index] && index < n ; index++)
		dest[dest_len++] = src[index];

	return (dest);
}
2-strchr.c/     0           0     0     644     382       `
#include "main.h"
/**
 * _strchr - locates a charater in a string
 * @s: the string including the character
 * @c: the character
 *
 * Return: a pointer to the first occurence and NULL if not found
 */
char *_strchr(char *s, char c)
{
	int a = 0, b;

	while (s[a])
	{
		a++;
	}

	for (b = 0 ; b <= a ; b++)
	{
		if (c == s[b])
		{
			s += b;
			return (s);
		}
	}
	return ('\0');
}
2-strncpy.c/    0           0     0     644     456       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: string to store the string copy
 * @src: the source string
 * @n: the maximum number of bytes to be copied from src
 *
 * Return: A pointer to the resulting string dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int a = 0, b = 0;

	while (src[b])
	{
		b++;
	}

	while (a < n && src[a])
	{
		dest[a] = src[a];
		a++;
	}

	while (a < n)
	{
		dest[a] = '\0';
		a++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     237       `
#include "main.h"
/**
 * _islower - checks if a letter is in lower case
 * @c: the character to be checked
 *
 * Return: 1 if is lower and 0 if not
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     184       `
#include "main.h"
/**
 * _puts - prints a string followed by a new line
 * @str: string to be printed
 */
void _puts(char *str)
{
	while (*str)
		_putchar(*str++);

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     275       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: pointer to the first string
 * @s2: pointer to the second string
 *
 * Return: the comparison
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     480       `
#include "main.h"
/**
 * _strspn - gets the length of a prefix substring
 * @s: source string
 * @accept: accepted string
 *
 * Return: number of bytes in the initial segment
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int bytes = 0;
	int index;

	while (*s)
	{
		for (index = 0 ; accept[index] ; index++)
		{
			if (*s == accept[index])
			{
				bytes++;
				break;
			}
			else if (accept[index + 1] == '\0')
				return (bytes);
		}
		s++;
	}
	return (bytes);
}
4-isalpha.c/    0           0     0     644     229       `
#include "main.h"
/**
 * _isalpha - checks for any letter of the alphabet
 * @c: value to be chcked
 *
 * Return: 1 if is a letter 0 if not
 */
int _isalpha(int c)
{
	if (c >= 'A' && c <= 'z')
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     415       `
#include "main.h"
/**
 * _strpbrk - searches the string for any of a set of bytes
 * @s: source string
 * @accept: accepted characters
 *
 * Return: the string since the first found accepted character
 */
char *_strpbrk(char *s, char *accept)
{
	int a = 0, b;

	while (s[a])
	{
		b = 0;
		while (accept[b])
		{
			if (s[a] == accept[b])
			{
				s += a;
				return (s);
			}
			b++;
		}
		a++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     453       `
#include "main.h"
/**
 * _strstr - locates a substring
 * @haystack: the string to search
 * @needle: the string to find
 *
 * Return: char value
 */
char *_strstr(char *haystack, char *needle)
{
	int a = 0, b = 0;

	while (haystack[a])
	{
		while (needle[b])
		{
			if (haystack[a + b] != needle[b])
			{
				break;
			}
			b++;
		}

		if (needle[b] == '\0')
		{
			return (haystack + a);
		}
		a++;
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     196       `
#include "main.h"
/**
 * _abs - computes absolute value of an integer
 * @n: integer to be computed
 *
 * Return: No return
 */
int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (-n);
}
9-strcpy.c/     0           0     0     644     376       `
#include "main.h"
/**
 * _strcpy - copies a string pointed to by @src
 * @dest: a buffer to copy the string to
 * @src: the source string to copy
 *
 * Return: A pointer to the destination string @dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0 ; src[i] != '\0' ; i++)
	{
		dest[i] = src[i];
	}

	dest[i++] = '\0';

	return (dest);
}
_putchar.c/     0           0     0     644     182       `
#include "main.h"
#include <unistd.h>
/**
 * _putchar - prints a string
 * @c: the string to be printed
 *
 * Return: 1 and 0
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
